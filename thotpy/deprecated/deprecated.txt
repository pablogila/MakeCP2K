# deprecated at v5.3.1


def scf_from_relax_old(folder:str=None,
                   relax_in:str='relax.in',
                   relax_out:str='relax.out'
                   ) -> None:
    '''
    Create a Quantum ESPRESSO `scf.in` file from a previous relax calculation.
    If no `folder` is provided, the current working directory is used.
    The `relax_in` and `relax_out` files by default are `relax.in` and `relax.out`,
    update the names if necessary.
    '''
    folder = call.here(folder)
    relax_in = file.get(folder, relax_in)
    relax_out = file.get(folder, relax_out)
    # Terminal feedback
    print(f'\nthoth.phonopy {version}\n'
          f'Creating Quantum ESPRESSO SCF input from previous relax calculation:\n'
          f'{relax_in}\n{relax_out}\n')
    # Create the scf.in from the previous relax.in
    scf_in = 'scf.in'
    comment = f'! Automatic SCF input made with thoth.phonopy {version}'
    file.from_template(relax_in, scf_in, comment)
    scf_in = file.get(folder, scf_in)
    # Save the ATOMIC_SPECIES from the relax input
    key_species = 'ATOMIC_SPECIES'
    key_species_end = r"(ATOMIC_POSITIONS|CELL_PARAMETERS)"
    atomic_species = find.between(key_species, key_species_end, scf_in, False, 1, True)
    atomic_species = '\n' + key_species + '\n' + atomic_species
    # Delete the old CELL_PARAMETERS, ATOMIC_POSITIONS and ATOMIC_SPECIES
    key_cell = 'CELL_PARAMETERS'
    text.delete_under('ATOMIC_POSITIONS', scf_in, -1, -1)
    try:
        text.delete_under(key_species, scf_in, -1, -1)
    except:  # It might be deleted already!
        pass
    try:
        text.delete_under(key_cell, scf_in, -1, -1)
    except:  # It might be deleted already!
        pass
    # Get the final coordinates from the relax output
    coordinates = find.between('Begin final coordinates', 'End final coordinates', relax_out, False, -1, False)
    coordinates = coordinates.splitlines()
    coordinates = "\n".join(coordinates[2:])
    # Insert the new ATOMIC_SPECIES and coordinates. Atomic species will go first
    text.insert_at(atomic_species, scf_in, -1)
    text.insert_at(coordinates, scf_in, -1)
    # Get the lattice parameterts
    alat_line = find.lines(key_cell, scf_in, -1, 0, False, False)[0]
    alat = extract.number(alat_line, 'alat')
    alat_text = f'  celldm(1) = {alat}'
    # Update lattice parameters, ibrav and calculation
    text.replace_line(r'CELL_PARAMETERS alat', key_cell, scf_in, -1)
    text.replace_line('', r'celldm\(\d\)\s*=', scf_in, 0, 0, 0, True)
    text.replace_line('', r'[ABC]\s*=', scf_in, 0, 0, 0, True)
    text.insert_under(alat_text, r'(&SYSTEM|&system)', scf_in, 1, 0, True)
    text.replace_line('  ibrav = 0', r'ibrav\s*=', scf_in, 0, 0, 0, True)
    text.replace_line("  calculation = 'scf'", r'calculation\s*=', scf_in, 0, 0, 0, True)
    # Terminal feedback
    print(f'Created input SCF file at:'
          f'{scf_in}\n')
    return None


# deprecated at v5.1.0


def delete_between_old(key1:str,
                   key2:str,
                   file,
                   delete_keys:bool=False,
                   reverse_match:bool=False,
                   regex:bool=False
                   ) -> None:
    '''
    Deletes the content between the line containing the `key1` and `key2` in the given `file`.
    Keywords can be at any position within the line.
    Regular expressions can be used by setting `regex=True`.\n
    Key lines are also deleted if `delete_keys=True`.\n
    Only the first matches of the keywords are used by default;
    you can use the last ones with `reverse_match=True`.
    '''
    file_path = get(file)
    index = 1
    if reverse_match:
        index = -1
    start, end = between_pos(key1, key2, file_path, delete_keys, index, regex)
    with open(file_path, 'r+b') as f:
        with mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_WRITE) as mm:
            remaining_lines = mm[end+1:]
            mm.resize(len(mm) - len(mm[start:end+1]))
            mm[start:] = remaining_lines
    return None

    
def replace_between_old(text:str,
                    key1:str,
                    key2:str,
                    file:str,
                    reverse_match:bool=False,
                    regex:bool=False
                    ) -> None:
    '''
    Replace lines with a given `text`, between the keywords `key1` and `key2` in a given `file`.
    Keywords can be at any position within the line.
    Regular expressions can be used by setting `regex=True`.\n
    Only the first matches of the keywords are used by default;
    you can use the last ones with `reverse_match=True`.
    ```
    lines...
    key1
    text
    key2
    lines...
    ```
    '''
    index = 1
    if reverse_match:
        index = -1
    delete_between(key1, key2, file, False, reverse_match, regex)
    insert_under(text, key1, file, index, 0, regex)
    return None


# deprecated at v4.6.0


def delete_between_old(key1:str, key2:str, file:str) -> None:
    '''
    Deletes the lines between two keywords in a given `file`.
    ```
    lines...
    key1
    (lines to be deleted)
    key2
    lines...
    ```
    '''
    file_path = get(file)
    with open(file_path, 'r') as f:
        lines = f.readlines()
    keep = []
    skip = False
    for line in lines:
        if key1 in line:
            skip = True
        if key2 in line:
            skip = False
        if not skip or key1 in line:
            keep.append(line)
    with open(file_path, 'w') as f:
        f.writelines(keep)
    return None
    

def delete_under_old(keyword:str, file:str) -> None:
    '''
    Deletes the lines under the first occurrence of the `keyword` in the given `file`.
    > TODO: IN THE FUTURE SHOULD BE POSITION-AGNOSTIC
    ```
    lines...
    keyword
    (end of file)
    ```
    '''
    file_path = get(file)
    with open(file_path, 'r') as f:
        lines = f.readlines()
    keep = []
    for line in lines:
        if keyword in line:
            break
        else:
            keep.append(line)
    with open(file, 'w') as f:
        f.writelines(keep)
    return None


def replace_under_old2(text:str,
                  keyword:str,
                  file,
                  number_of_lines:int=1,
                  number_of_replacements:int=0,
                  skip_lines:int=0,
                  regex:bool=False
                  ) -> None:
    '''
    Replaces the given `number_of_lines` under the line(s) containing
    the `keyword` by the specified `text`, in the given `file`.
    The keyword can be at any position within the line.\n
    The specified `number_of_lines` (int, >= 0) is replaced, only 1 line by default.
    If `number_of_lines` is 0, all the text below is replaced,
    and only the match indicated by `number_of_replacements` will be used (the last one by default).\n
    By default all matches are replaced with `number_of_replacements=0`,
    but it can replace only a specific number of matches
    with positive numbers (1, 2...), or starting from the bottom with negative numbers.\n
    The text can be replaced after a specific number of lines after the match,
    changing the value `skip_lines`. Negative integers introduce the text in the previous lines.\n
    Regular expressions can be used by setting `regex=True`. 
    ```
    '''
    file_path = get(file)
    if regex:
        positions = find_pos_regex(keyword, file, number_of_replacements)
    else:
        positions = find_pos(keyword, file, number_of_replacements)
    positions.reverse()  # Must start replacing from the end, otherwise the atual positions may change!
    if number_of_lines == 0:  # Only one replacement will take place, specified by number_of_replacements
        if number_of_replacements < 0:
            positions.reverse()
        positions = [positions[0]]  # Keep only the specified match
    # Open the file in read-write mode
    with open(file_path, 'r+b') as f:
        with mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_WRITE) as mm:
            # Get the places to insert the text
            for position in positions:
                start, end = find_pos_line(position, mm, skip_lines)  # Full line with the match
                # Now let's get the lines to replace
                replace_start = start
                if number_of_lines == 0:
                    replace_end = len(mm) - 1
                else:
                    _, replace_end = find_pos_line((start, end), mm, abs(number_of_lines))
                print(start, end) ############### DEBUG
                print(replace_start, replace_end) ############### DEBUG
                inserted_text = '\n' + text # Ensure we end in a different line
                if replace_end == 0: # If on the first line
                    inserted_text = text + '\n'
                remaining_lines = mm[replace_end:]
                new_line = inserted_text.encode()
                #if number_of_lines == 0:
                #    updated_content = new_line
                #    mm.resize(len(mm) + len(new_line) - len(mm[end:]))
                #else:
                updated_content = new_line + remaining_lines
                mm.resize(len(mm) + len(new_line) - len(mm[replace_start:replace_end]))
                mm[end:] = updated_content


def replace_under_old(text:str,
                  keyword:str,
                  file,
                  replace_last:bool=False,
                  skip_lines:int=0,
                  regex:bool=False
                  ) -> None:
    '''
    Replaces the content below the line containing the `keyword`
    by the given `text` string in the given `file`.
    The keyword can be at any position within the line.
    By default the replacement will take place below the first match,
    but it can be replaced from the last match with `replace_last=True`.
    The text can be replaced after a specific number of lines after the match,
    changing the value `skip_lines`. Negative integers replace the text in the previous lines.
    Regular expressions can be used by setting `regex=True`. 
    ```
    '''
    file_path = get(file)
    replace_index = 1
    if replace_last:
        replace_index = -1
    if regex:
        positions = find_pos_regex(keyword, file, replace_index)
    else:
        positions = find_pos(keyword, file, replace_index)
    positions.reverse()  # Must start replacing from the end, otherwise the atual positions may change!
    # Open the file in read-write mode
    with open(file_path, 'r+b') as f:
        with mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_WRITE) as mm:
            # Get the places to insert the text
            position = positions[0]
            start, end = find_pos_line(position, mm, skip_lines)
            inserted_text = '\n' + text # Ensure we end in a different line
            if end == 0: # If on the first line
                inserted_text = text + '\n'
            remaining_lines = mm[end:]
            new_line = inserted_text.encode()
            mm.resize(len(mm) + len(new_line) - len(remaining_lines))
            mm[end:] = new_line


# Deprecated at v4.3.8:

def insert_under_old(text:str, keyword:str, file:str, only_first=False) -> None:
    '''
    Inserts the given `text` string under the first occurrence
    of the `keyword` in the given `file`.
    The keyword can be at any position within the line.
    If `only_first=True`, it will only work
    at the first instance of the keyword, ignoring the rest.
    The keyword can be at any position in the line, not just at the beginning.
    ```
    line1
    keyword line2
    text
    line3
    ```
    '''
    file_path = get(file)
    with open(file_path, 'r') as f:
        document = f.readlines()
    indices = (i for i, line in enumerate(document) if keyword in line.strip())
    if indices:
        if only_first:
            document.insert(indices[0] + 1, text + "\n")
        else:
            for index in indices:
                document.insert(index + 1, text + "\n")
        with open(file_path, 'w') as f:
            f.writelines(document)
    else:
        raise ValueError("Didn't find the '" + keyword + "' keyword in " + file_path)
    return None


# Deprecated at v4.3.7:


def replace_line_old(text: str, keyword: str, file: str, number_of_replacements:int=0) -> None:
    '''
    Replaces the entire line containing the `keyword` string with the `text` string in the given `filename`.
    The value `number_of_replacements` specifies the number of lines to replace:
    1 to replace only the first line with the keyword, 2, 3...
    Use negative values to replace from the end of the file,
    e.g., to replace only the last line containing the keyword, use `number_of_replacements = -1`.
    To replace all lines, set `number_of_replacements = 0`, which is the value by default.
    '''
    file_path = get(file)
    with open(file_path, 'r+') as f:
        lines = f.readlines()
        if number_of_replacements == 0:
            lines = [line.replace(keyword, text) for line in lines]
        else:
            replacements_left = abs(number_of_replacements)
            step = 1 if number_of_replacements > 0 else -1
            start = 0 if number_of_replacements > 0 else len(lines) - 1
            while replacements_left > 0:
                if step > 0:
                    for i in range(start, len(lines)):
                        if keyword in lines[i]:
                            lines[i] = text + '\n'
                            replacements_left -= 1
                    break
                else:
                    for i in range(start, -1, -1):
                        if keyword in lines[i]:
                            lines[i] = text + '\n'
                            replacements_left -= 1
                    break
                start += step
        f.seek(0)
        f.writelines(lines)
        f.truncate()


def replace_old(text:str,
                keyword:str,
                file:str,
                number_of_replacements:int=0) -> None:
    '''
    Replaces the `keyword` string with the `text` string in the given `filename`.
    The value `number_of_replacements` specifies the number of replacements to perform:
    1 to replace only the first keyword found, 2, 3...
    Use negative values to replace from the end of the file,
    eg. to replace the last found key, use `number_of_replacements = -1`.
    To replace all values, set `number_of_replacements = 0`, which is the value by default.
    ```
    line... keyword ...line -> line... text ...line
    ```
    '''
    file_path = get(file)
    with open(file_path, 'r+') as f:
        content = f.read()
        if number_of_replacements == 0:
            content = content.replace(keyword, text)
        else:
            replacements_left = abs(number_of_replacements)
            while replacements_left > 0:
                if number_of_replacements > 0: # If negative, start backwards
                    index = content.find(keyword)
                else:
                    index = content.rfind(keyword)
                if index == -1:
                    break
                content = "".join([content[:index], text, content[index + len(keyword):]])
                replacements_left -= 1
        f.seek(0)
        f.write(content)
        f.truncate()




# Deprecated at v4.3.6:

def find_old(keyword:str, file:str, number_of_matches:int=0, additional_lines:int=0, split_additional_lines:bool=False) -> list:
    '''
    Finds the line(s) containing the `keyword` string in the given `file`,
    returning a list with the matches.\n
    The value `number_of_matches` specifies the max number of matches to be returned.
    Defaults to 0 to return all possible matches. Set it to 1 to return only one match,
    or to negative integers to start the search from the end of the file upwards.\n
    The value `additional_lines` specifies the number of additional lines
    below the target line that are also returned;
    2 to return the found line plus two additional lines below, etc.
    Negative values return the specified number of lines before the target line.
    The original ordering from the file is preserved.
    Defaults to `additional_lines=0`, only returning the target line.
    By default, the additional lines are returned in the same list item as the match separated by a `\\n`,
    unless `split_additional_lines=True`, in which case they are added as additional items in the list.
    '''
    file_path = get(file)
    matches = []
    # Counter to track the number of matches. If number_of_matches=0, counter remains 0.
    counter = 0
    counter_stop = abs(number_of_matches)
    with open(file_path, 'r+b') as f:
        mm = mmap.mmap(f.fileno(), length=0, access=mmap.ACCESS_READ)
        if number_of_matches > 0:
            start = 0
        elif number_of_matches < 0:
            start = len(mm) - 1
        else: # Find all matches
            start = 0
            counter_stop = 1
        while counter < counter_stop:
            if number_of_matches >= 0:
                start = mm.find(keyword.encode(), start, len(mm)-1)
            else:
                start = mm.rfind(keyword.encode(), 0, start)
            if start == -1:
                break
            # Get the positions of the full line containing the match
            line_start = mm.rfind(b'\n', 0, start) +1
            line_end = mm.find(b'\n', start, len(mm)-1)
            # Get the additional lines
            match_start = line_start
            match_end = line_end
            if match_start == -1:
                match_start = 0
            if match_end == -1:
                match_end = len(mm)-1
            if additional_lines > 0:
                for _ in range(abs(additional_lines)):
                    match_end = mm.find(b'\n', match_end+1, len(mm)-1)
                    if match_end == -1:
                        break
            elif additional_lines < 0:
                for _ in range(abs(additional_lines)):
                    match_start = mm.rfind(b'\n', 0, match_start-1) +1
                    if match_start == -1:
                        break
            # Save the matched lines in a list
            matches.append(mm[match_start:match_end].decode())
            # Stop or keep searching
            if number_of_matches > 0:
                start = match_end + 1
                counter += 1
            elif number_of_matches < 0:
                start = match_start - 1
                counter += 1
            elif number_of_matches == 0:
                start += 1
    if split_additional_lines:
        splitted_matches = []
        for string in matches:
            splitted_match = string.splitlines()
            splitted_matches.extend(splitted_match)
        matches = splitted_matches
    return matches



# Deprecated at v0.3.0
def get_file_with_extension(folder, extensions, preference=None):
    '''
    Returns the file with one of the the specified `extensions`
    (string or list with strings) in the given `folder`.
    If there is more than one file with the extension,
    it returns the one containing the `preference` string.
    '''
    files = get_files_from_folder(folder, extensions)
    if files is None:
        return None
    if len(files) > 1:
        for file in files:
            if preference in file:
                return file
        raise ValueError(folder + ' contains too many ' + extensions + ' files')
        #print("  ERROR: " + folder + " contains too many " + extensions + " files, skipping...")
    return files[0]

# README deprecated at v1.0.0


> Everything below is deprecated, as the script 
> is now a regular python package. It will be 
> removed in future versions.
You can also run the script with python 
(Windows), or python3 (Linux), with a flag to 
specify the kind of input, currently supporting 
CP2K and CASTEP. To mass-create `*.cell` [CASTEP 
inputs](#castep-inputs), as well as 
simultaneously creating a supercell, e.g. of 
3x2x3 size, run the following: ```bash python3 
inputmaker.py -castep -supercell=[3,2,3] ``` To 
create [CP2K inputs](#cp2k-inputs), the file 
structure should have been previously 
configured, as described in the section [File 
structure](#file-structure). Then run: ```bash 
python3 inputmaker.py -cp2k ```
### CASTEP inputs

CASTEP `*.cell` files can be mass-produced by 
running the script with the `-castep` flag. The 
script will then search for all `*.cif` files on 
the current path; if none are found, then it 
will check each subfolder. The script will also 
create a supercell, if the `-supercell=[k,l,m]` 
flag is provided, replacing `k`, `l`, and `m` 
with the desired supercell size (e.g. [3,2,3], 
etc). The outputs are placed in the same folder 
as the `*.cif` files, unless the `-out` flag is 
used, in which case the outputs are placed in a 
`/out/` folder. To create the `*.cell` files: 
```bash python3 inputmaker.py -castep 
-supercell=[k,l,m] -out ```
### CP2K inputs
The template for CP2K inputs should contain 
several keywords, where the text will be 
replaced. For instance, you need a keyword just 
before the ABC rows of the `&CELL` section, 
which will be replaced by the updated cells. 
This keyword should be specified on the 
`key_cell` variable of the `cp2k()` function. An 
example of a cell section of a template file: 
```CP2K &SUBSYS
    &CELL
!<keyword-cell>
        A 1.000000000000000 0.000000000000000 
        0.000000000000000 B 0.000000000000000 
        1.000000000000000 0.000000000000000 C 
        0.000000000000000 0.000000000000000 
        1.000000000000000
        ! Line reserved for debugging, 
        ! immediatly under cell parameters. DO 
        ! NOT WRITE HERE.
        !!! Make sure that the following 
        !!! parameters are correct! input-maker 
        !!! does not check them.
        PERIODIC XYZ MULTIPLE_UNIT_CELL 1 1 1 
    &END CELL
```

The keys are defined on the `cp2k()` function, 
as follows: Notice that for CP2K inputs, a PDB 
and a PSF file are required. The PDB file is 
used to get the coordinates, and the PSF file is 
used to get the topology. Both files are 
detected automatically; however, in case the PSF 
file is not found, the script can create an 
initial input file so that CP2K can quickly 
generate it. After that, run again inputmaker 
and CP2K for a second time, now with the PSF 
file available. The keywords for the topology 
section are then used to place the coordinates 
and the topology in the correct places, as 
follows: ```CP2K
!!!  ONLY RUN 1st TIME (without PSF file) !!!
!<keyword-topology-init>
    &COORD SCALED .TRUE.
!<keyword-coordinates>
    &END COORD &TOPOLOGY &generate bondparm 
            covalent BONDLENGTH_MAX 3.5 
            bondparm_factor 1.0 create_molecules 
            .true.
        &end generate &CENTER_COORDINATES &END 
        CENTER_COORDINATES CONNECTIVITY GENERATE 
        &DUMP_PDB &END &DUMP_PSF &END
!!!  RUN 2nd time, ONCE YOU HAVE PDB & PSF FILES 
!!!  !!!
!<keyword-topology-run>
    &TOPOLOGY COORD_FILE_FORMAT PDB
!<keyword-pdb-filename>
        COORD_FILE_NAME ./dumped.pdb 
        CONNECTIVITY psf
!<keyword-psf-filename>
        CONN_FILE_NAME ./dumped.psf
!<keyword-topology-end>
    &END TOPOLOGY ```

### File structure
Download `inputmaker.py` and place it near the 
input template file, in this case, a CP2K input. 
There should be subfolders with the structural 
files to create the inputs. The file structure 
should look like this: ``` root_folder │ ├── 
inputmaker.py ├── sbatch_all.sh ├── 
custom_input.inp.template ├── 
custom_slurm.sh.template │ ├── job_folder_1 │ 
├── structural_file_1.pdb │ ├── 
structural_file_1.psf │ └── ... ├── job_folder_2 
│ ├── structural_file_2.pdb │ └── ... └── ... 
```
#### Optional: Reusing old CP2K inputs
You can also reuse old `*.inp` files, by 
changing the extension to `.inp.old`. It will 
then copy to the template just the ABC rows from 
the &CELL section, after the keyword.
### Sbatch'ing slurm files
If there is only one `*.sh` slurm file per 
folder, you can sbatch' all inputs with the 
command: ```bash source sbatch_all.sh ```

